#detailvew_nc
PREFIX : <http://api.stardog.com/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?aircraftID ?flightID ?engineOperationID ?specifiedTime ?actualTime ?difference ?complianceStatus
WHERE {
  # Retrieve the specified time from the engine operation specification
  {
    SELECT (xsd:integer(?specifiedTimeRaw) AS ?specifiedTime)
    WHERE {
      ?engineOperationSpecification :has_continuant_part ?specifiedTemporalIntervalIdentifier .
      ?specifiedTemporalIntervalIdentifier :generically_depends_on ?specifiedTimeEntity .
      ?specifiedTimeEntity :has_integer_value ?specifiedTimeRaw .
    } LIMIT 1
  }
  
  # Get aircraft identifiers
  ?artifactIdentifierAircraft :designates ?aircraft .
  ?artifactIdentifierAircraft :generically_depends_on ?aircraftIBE .
  ?aircraftIBE :has_text_value ?aircraftID .
  
  # Get flights that the aircraft participates in
  ?aircraft :participates_in ?flight .
  
  # Get flight identifiers
  ?designativeInformationFlight :designates ?flight .
  ?designativeInformationFlight :generically_depends_on ?flightIBE .
  ?flightIBE :has_text_value ?flightID .
  
  # Get engine operation
  ?flight :has_process_part ?engineOperation .
  
  # Get engine operation identifiers
  ?designativeInformationEngineOp :designates ?engineOperation .
  ?designativeInformationEngineOp :generically_depends_on ?engineOpIBE .
  ?engineOpIBE :has_text_value ?engineOperationID .
  
  # Get actual operation time
  ?engineOperation :occurs_on ?temporalInterval .
  ?temporalIntervalIdentifier :describes ?temporalInterval .
  ?temporalIntervalIdentifier :generically_depends_on ?actualTimeEntity .
  ?actualTimeEntity :has_integer_value ?actualTimeRaw .
  BIND(xsd:integer(?actualTimeRaw) AS ?actualTime)
  
  # Calculate difference and compliance status
  BIND(?actualTime - ?specifiedTime AS ?difference)
  BIND(
    IF(?difference <= 0, "Compliant",
      CONCAT("Over by ", STR(?difference), " Second(s)")
    ) AS ?complianceStatus
  )
}
ORDER BY ?aircraftID ?flightID

=================================
#highview_nc

PREFIX : <http://api.stardog.com/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?aircraftID
  (COUNT(?engineOperation) AS ?totalOperations)
  (SUM(IF(?difference <= 0, 1, 0)) AS ?compliantOperations)
  (SUM(IF(?difference > 0, 1, 0)) AS ?nonCompliantOperations)
  (ROUND(AVG(IF(?difference > 0, ((?actualTime - ?specifiedTime) / ?specifiedTime) * 100, 0)), 2) AS ?averagePercentageOverTime)
WHERE {
  # Retrieve the specified time from the engine operation specification
  {
    SELECT (xsd:decimal(?specifiedTimeRaw) AS ?specifiedTime)
    WHERE {
      ?engineOperationSpecification :has_continuant_part ?specifiedTemporalIntervalIdentifier .
      ?specifiedTemporalIntervalIdentifier :generically_depends_on ?specifiedTimeEntity .
      ?specifiedTimeEntity :has_integer_value ?specifiedTimeRaw .
    } LIMIT 1
  }
  
  # Get aircraft identifiers
  ?artifactIdentifierAircraft :designates ?aircraft .
  ?artifactIdentifierAircraft :generically_depends_on ?aircraftIBE .
  ?aircraftIBE :has_text_value ?aircraftID .
  
  # Get flights that the aircraft participates in
  ?aircraft :participates_in ?flight .
  
  # Get engine operation
  ?flight :has_process_part ?engineOperation .
  
  # Get actual operation time
  ?engineOperation :occurs_on ?temporalInterval .
  ?temporalIntervalIdentifier :describes ?temporalInterval .
  ?temporalIntervalIdentifier :generically_depends_on ?actualTimeEntity .
  ?actualTimeEntity :has_integer_value ?actualTimeRaw .
  BIND(xsd:decimal(?actualTimeRaw) AS ?actualTime)
  
  # Calculate difference
  BIND(?actualTime - ?specifiedTime AS ?difference)
}
GROUP BY ?aircraftID
ORDER BY ?aircraftID


==================================================

# entire graph non class

PREFIX : <http://api.stardog.com/>
PREFIX cco: <http://www.ontologyrepository.com/CommonCoreOntologies/>
PREFIX edsq1: <tag:stardog:studio:edsq1:model:>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>

CONSTRUCT {
  ?subject ?predicate ?object .
}
WHERE {
  ?subject ?predicate ?object .

  # Ensure that the subject is not a class
  FILTER NOT EXISTS { ?subject rdf:type owl:Class }

  # Ensure that the object is not a class
  FILTER NOT EXISTS { ?object rdf:type owl:Class }

  # Ensure that the predicate is not a class-related property (e.g., rdfs:subClassOf)
  FILTER (?predicate != rdf:type && ?predicate != rdfs:subClassOf)
}


======================================

# allop

PREFIX : <http://api.stardog.com/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?aircraftID ?flightID ?engineOperationID ?specifiedTime ?actualTime ?difference ?complianceStatus
WHERE {
  # Retrieve the specified time from the engine operation specification
  {
    SELECT (xsd:integer(?specifiedTimeRaw) AS ?specifiedTime)
    WHERE {
      ?engineOperationSpecification :has_continuant_part ?specifiedTemporalIntervalIdentifier .
      ?specifiedTemporalIntervalIdentifier :generically_depends_on ?specifiedTimeEntity .
      ?specifiedTimeEntity :has_integer_value ?specifiedTimeRaw .
    } LIMIT 1
  }
  
  # Get aircraft identifiers
  ?artifactIdentifierAircraft :designates ?aircraft .
  ?artifactIdentifierAircraft :generically_depends_on ?aircraftIBE .
  ?aircraftIBE :has_text_value ?aircraftID .
  
  # Get flights that the aircraft participates in
  ?aircraft :participates_in ?flight .
  
  # Get flight identifiers
  ?designativeInformationFlight :designates ?flight .
  ?designativeInformationFlight :generically_depends_on ?flightIBE .
  ?flightIBE :has_text_value ?flightID .
  
  # Get engine operation
  ?flight :has_process_part ?engineOperation .
  
  # Get engine operation identifiers
  ?designativeInformationEngineOp :designates ?engineOperation .
  ?designativeInformationEngineOp :generically_depends_on ?engineOpIBE .
  ?engineOpIBE :has_text_value ?engineOperationID .
  
  # Get actual operation time
  ?engineOperation :occurs_on ?temporalInterval .
  ?temporalIntervalIdentifier :describes ?temporalInterval .
  ?temporalIntervalIdentifier :generically_depends_on ?actualTimeEntity .
  ?actualTimeEntity :has_integer_value ?actualTimeRaw .
  BIND(xsd:integer(?actualTimeRaw) AS ?actualTime)
  
  # Calculate difference and compliance status
  BIND(?actualTime - ?specifiedTime AS ?difference)
  BIND(
    IF(?difference <= 0, "Compliant",
      CONCAT("Over by ", STR(?difference), " Second(s)")
    ) AS ?complianceStatus
  )
}
ORDER BY ?aircraftID ?flightID


========================================

# totalop_per

PREFIX : <http://api.stardog.com/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT 
  (COUNT(?engineOperation) AS ?totalOperations)
  (SUM(IF(?difference <= 0, 1, 0)) AS ?compliantOperations)
  (SUM(IF(?difference > 0, 1, 0)) AS ?nonCompliantOperations)
  (ROUND((?nonCompliantOperations / ?totalOperations) * 100) AS ?percentageOver)
WHERE {
  # Retrieve the specified time from the engine operation specification
  {
    SELECT (xsd:integer(?specifiedTimeRaw) AS ?specifiedTime)
    WHERE {
      ?engineOperationSpecification :has_continuant_part ?specifiedTemporalIntervalIdentifier .
      ?specifiedTemporalIntervalIdentifier :generically_depends_on ?specifiedTimeEntity .
      ?specifiedTimeEntity :has_integer_value ?specifiedTimeRaw .
    } LIMIT 1
  }
  
  # Get all engine operations and their actual times
  ?engineOperation :occurs_on ?temporalInterval .
  ?temporalIntervalIdentifier :describes ?temporalInterval .
  ?temporalIntervalIdentifier :generically_depends_on ?actualTimeEntity .
  ?actualTimeEntity :has_integer_value ?actualTimeRaw .
  BIND(xsd:integer(?actualTimeRaw) AS ?actualTime)
  
  # Calculate difference
  BIND(?actualTime - ?specifiedTime AS ?difference)
}

