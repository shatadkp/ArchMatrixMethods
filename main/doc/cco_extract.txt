from rdflib import Graph, Namespace, URIRef, Literal, BNode
from rdflib.namespace import RDF, RDFS, OWL
from rdflib.collection import Collection
import csv

# Load the TTL file
g = Graph()
g.parse("objpropcco.ttl", format="ttl")  # Replace "bfoobj.ttl" with your TTL file name

# Define namespaces
RDF_ns = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
RDFS_ns = Namespace("http://www.w3.org/2000/01/rdf-schema#")
OWL_ns = Namespace("http://www.w3.org/2002/07/owl#")
CCO_ns = Namespace("http://www.ontologyrepository.com/CommonCoreOntologies/")
OBO_ns = Namespace("http://purl.obolibrary.org/obo/")
SKOS_ns = Namespace("http://www.w3.org/2004/02/skos/core#")
DC_ns = Namespace("http://purl.org/dc/elements/1.1/")

# Bind prefixes
g.bind('rdf', RDF_ns)
g.bind('rdfs', RDFS_ns)
g.bind('owl', OWL_ns)
g.bind('cco', CCO_ns)
g.bind('obo', OBO_ns)
g.bind('skos', SKOS_ns)
g.bind('dc', DC_ns)

# Hardcoded mapping from BFO numbers to labels (Classes and Object Properties)
bfo_number_to_label = {
    # Classes
    OBO_ns.BFO_0000001: "entity",
    OBO_ns.BFO_0000002: "continuant",
    OBO_ns.BFO_0000003: "occurrent",
    OBO_ns.BFO_0000004: "independent continuant",
    OBO_ns.BFO_0000006: "spatial region",
    OBO_ns.BFO_0000008: "temporal region",
    OBO_ns.BFO_0000009: "two-dimensional spatial region",
    OBO_ns.BFO_0000011: "spatiotemporal region",
    OBO_ns.BFO_0000015: "process",
    OBO_ns.BFO_0000016: "disposition",
    OBO_ns.BFO_0000017: "realizable entity",
    OBO_ns.BFO_0000018: "zero-dimensional spatial region",
    OBO_ns.BFO_0000019: "quality",
    OBO_ns.BFO_0000020: "specifically dependent continuant",
    OBO_ns.BFO_0000023: "role",
    OBO_ns.BFO_0000024: "fiat object part",
    OBO_ns.BFO_0000026: "one-dimensional spatial region",
    OBO_ns.BFO_0000027: "object aggregate",
    OBO_ns.BFO_0000028: "three-dimensional spatial region",
    OBO_ns.BFO_0000029: "site",
    OBO_ns.BFO_0000030: "object",
    OBO_ns.BFO_0000031: "generically dependent continuant",
    OBO_ns.BFO_0000034: "function",
    OBO_ns.BFO_0000035: "process boundary",
    OBO_ns.BFO_0000038: "one-dimensional temporal region",
    OBO_ns.BFO_0000040: "material entity",
    OBO_ns.BFO_0000140: "continuant fiat boundary",
    OBO_ns.BFO_0000141: "immaterial entity",
    OBO_ns.BFO_0000142: "fiat line",
    OBO_ns.BFO_0000145: "relational quality",
    OBO_ns.BFO_0000146: "fiat surface",
    OBO_ns.BFO_0000147: "fiat point",
    OBO_ns.BFO_0000148: "zero-dimensional temporal region",
    OBO_ns.BFO_0000182: "history",
    OBO_ns.BFO_0000202: "temporal interval",
    OBO_ns.BFO_0000203: "temporal instant",
    # Object Properties
    OBO_ns.BFO_0000054: "has realization",
    OBO_ns.BFO_0000055: "realizes",
    OBO_ns.BFO_0000056: "participates in",
    OBO_ns.BFO_0000057: "has participant",
    OBO_ns.BFO_0000058: "is concretized by",
    OBO_ns.BFO_0000059: "concretizes",
    OBO_ns.BFO_0000062: "preceded by",
    OBO_ns.BFO_0000063: "precedes",
    OBO_ns.BFO_0000066: "occurs in",
    OBO_ns.BFO_0000084: "generically depends on",
    OBO_ns.BFO_0000101: "is carrier of",
    OBO_ns.BFO_0000108: "exists at",
    OBO_ns.BFO_0000115: "has member part",
    OBO_ns.BFO_0000117: "has occurrent part",
    OBO_ns.BFO_0000121: "has temporal part",
    OBO_ns.BFO_0000124: "location of",
    OBO_ns.BFO_0000127: "material basis of",
    OBO_ns.BFO_0000129: "member part of",
    OBO_ns.BFO_0000132: "occurrent part of",
    OBO_ns.BFO_0000139: "temporal part of",
    OBO_ns.BFO_0000153: "temporally projects onto",
    OBO_ns.BFO_0000171: "located in",
    OBO_ns.BFO_0000176: "continuant part of",
    OBO_ns.BFO_0000178: "has continuant part",
    OBO_ns.BFO_0000183: "environs",
    OBO_ns.BFO_0000184: "history of",
    OBO_ns.BFO_0000185: "has history",
    OBO_ns.BFO_0000194: "specifically depended on by",
    OBO_ns.BFO_0000195: "specifically depends on",
    OBO_ns.BFO_0000196: "bearer of",
    OBO_ns.BFO_0000197: "inheres in",
    OBO_ns.BFO_0000199: "occupies temporal region",
    OBO_ns.BFO_0000200: "occupies spatiotemporal region",
    OBO_ns.BFO_0000210: "occupies spatial region",
    OBO_ns.BFO_0000216: "spatially projects onto",
    OBO_ns.BFO_0000218: "has material basis",
    OBO_ns.BFO_0000221: "first instant of",
    OBO_ns.BFO_0000222: "has first instant",
    OBO_ns.BFO_0000223: "last instant of",
    OBO_ns.BFO_0000224: "has last instant",
}

# Function to strip language tags and quotes from literals
def clean_literal(lit):
    if isinstance(lit, Literal):
        return str(lit)
    else:
        return lit

# List of properties to extract
properties_to_extract = [
    (RDF.type, 'rdf_type'),
    (RDFS.subPropertyOf, 'rdfs_subPropertyOf'),
    (OWL.inverseOf, 'owl_inverseOf'),
    (RDFS.domain, 'rdfs_domain'),
    (RDFS.range, 'rdfs_range'),
    (URIRef('http://purl.org/dc/elements/1.1/identifier'), 'dc_identifier'),
    (URIRef('http://www.w3.org/2004/02/skos/core#altLabel'), 'skos_altLabel'),
    (RDFS.label, 'rdfs_label'),
    (URIRef('http://www.w3.org/2004/02/skos/core#definition'), 'skos_definition'),
    (URIRef('http://www.w3.org/2004/02/skos/core#scopeNote'), 'skos_scopeNote'),
    (URIRef('http://www.w3.org/2004/02/skos/core#example'), 'skos_example'),
    (CCO_ns.definition, 'cco_definition'),
    (CCO_ns.elucidation, 'cco_elucidation'),
    (CCO_ns.is_curated_in_ontology, 'cco_is_curated_in_ontology'),
]

# Get all object properties
object_properties = set(g.subjects(RDF.type, OWL.ObjectProperty))

# Function to serialize nodes (URIs or literals)
def serialize_node(node, graph, namespace_manager, visited=None):
    if isinstance(node, URIRef):
        # Check if node is in the hardcoded mapping
        if node in bfo_number_to_label:
            return bfo_number_to_label[node]
        else:
            # Try to get the label from the graph
            labels = set()
            for label in graph.objects(node, RDFS.label):
                labels.add(clean_literal(label))
            if labels:
                return list(labels)[0]  # Use the first label
            else:
                return node.n3(namespace_manager)
    elif isinstance(node, Literal):
        return clean_literal(node)
    else:
        return serialize_blank_node(node, graph, namespace_manager, visited)

# Function to serialize blank nodes
def serialize_blank_node(node, graph, namespace_manager, visited=None):
    if visited is None:
        visited = set()
    if node in visited:
        return ''  # Avoid infinite loops
    visited.add(node)

    # Check if node is a list (rdf:List)
    if (node, RDF_ns.first, None) in graph:
        # It's a list
        collection = Collection(graph, node)
        items = []
        for item in collection:
            if isinstance(item, BNode):
                item_str = serialize_blank_node(item, graph, namespace_manager, visited)
            else:
                item_str = serialize_node(item, graph, namespace_manager, visited)
            items.append(item_str)
        return '( ' + ' '.join(items) + ' )'
    else:
        # It's a regular blank node
        components = []
        for predicate, obj in graph.predicate_objects(node):
            pred_str = serialize_node(predicate, graph, namespace_manager, visited)
            if isinstance(obj, BNode):
                obj_str = serialize_blank_node(obj, graph, namespace_manager, visited)
            else:
                obj_str = serialize_node(obj, graph, namespace_manager, visited)
            components.append(f"{pred_str} {obj_str}")
        return '[ ' + ' ; '.join(components) + ' ]'

# Prepare CSV file
with open('output_ccoobj11.csv', 'w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['object_property_uri', 'object_property_label'] + [name for uri, name in properties_to_extract if name != 'rdfs_label']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    
    for op in object_properties:
        row = {}
        # object_property_uri: keep as is (with the number)
        row['object_property_uri'] = op.n3(g.namespace_manager)
        # Get the label(s)
        labels = set()
        for label in g.objects(op, RDFS.label):
            labels.add(clean_literal(label))
        if labels:
            row['object_property_label'] = '; '.join(labels)
        else:
            # Use hardcoded mapping if label is missing
            if op in bfo_number_to_label:
                row['object_property_label'] = bfo_number_to_label[op]
            else:
                row['object_property_label'] = ''
        for prop_uri, prop_name in properties_to_extract:
            if prop_name == 'rdfs_label':
                continue  # Already handled
            values = set()
            for obj in g.objects(op, prop_uri):
                if isinstance(obj, BNode):
                    serialized_obj = serialize_blank_node(obj, g, g.namespace_manager)
                    values.add(serialized_obj)
                else:
                    obj_str = serialize_node(obj, g, g.namespace_manager)
                    values.add(obj_str)
            # Clean literals in values
            cleaned_values = [clean_literal(value) for value in values]
            row[prop_name] = '; '.join(cleaned_values)
        writer.writerow(row)
